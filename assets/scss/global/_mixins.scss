//文字コードはutf-8
@charset "UTF-8";

@use "variables" as v;
@use "sass:math";

// BRAKE POINT
$breakpoints: (
  'smartphone': 'screen and (max-width: #{v.$bp_smartphone_max})',
  'tablet': 'screen and (min-width: #{v.$bp_tablet_min}) and (max-width: #{v.$bp_tablet_max})',
  'pc_x_tablet': 'screen and (min-width: #{v.$bp_tablet_min})',
  'sp_x_tablet': 'screen and (max-width: #{v.$bp_tablet_max})',
  'pc_content_size': 'screen and (min-width: #{v.$bp_pc_min}) and (max-width: #{v.$base_content_width})',
  'pc': 'screen and (min-width: #{v.$bp_pc_min})',
  'pcLg': 'screen and (min-width: #{v.$bp_pc_lg})'
)
!default;

@mixin media_queries($breakpoint: smartphone){
  @media #{map-get($breakpoints, $breakpoint)}{
    @content;
  }
}

// transition
@mixin transition($val...){
  @if(length($val) == 0){
    $val: 0.3s ease-out;
  }
  -wewbkit-transition: $val;
  transition: $val;
}

// aspect-ratio
@mixin aspect-ratio($width, $height, $max-width: none){
  overflow: hidden;
  aspect-ratio: #{$width} / #{$height};
  @if ($max-width != 'none'){
    max-width: v.$max-width + px;
  }
  >img{
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  @supports not (aspect-ratio: #{$width} / #{$height}){
    position: relative;
    &::before{
      float: left;
      content: "";
      padding-top: math.div(round(math.div($height , $width) * 100% * 100) , 100);
    }
    &::after{
      display: block;
      content: "";
      clear: both;
    }
    >img{
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
  }
}

// font-size
@mixin fontsize($size: 16){
  font-size: $size + px;
  font-size: math.div($size, 10) + rem;
}

// box shadow
@mixin box_shadow($val...){
  -webkit-box-shadow: $val;
  box-shadow: $val;
}

// text shadow
@mixin text_shadow($val...){
  -webkit-text-shadow: $val;
  text-shadow: $val;
}
